/*
 * Central Ledger
 * These are the endpoints provided by the Central Ledger server of CAPTOR. These endpoints are used by the Inspect and Transport applications. The Inspect application will use the endpoints with inspection tags and the Transport application will use the endpoints with trip tags
 *
 * OpenAPI spec version: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.model.Checkpoint;
import io.swagger.model.CheckpointInspectorKey;
import io.swagger.model.ComponentsschemasinspectionId;
import io.swagger.model.Componentsschemasnonce;
import io.swagger.v3.oas.annotations.media.Schema;
import javax.validation.constraints.*;

/**
 * Inspection
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2019-04-24T14:07:08.201Z[GMT]")public class Inspection   {
  @JsonProperty("checkpoint")
  private Checkpoint checkpoint = null;

  @JsonProperty("inspectionId")
  private ComponentsschemasinspectionId inspectionId = null;

  @JsonProperty("transportKey")
  private CheckpointInspectorKey transportKey = null;

  @JsonProperty("nonce")
  private Componentsschemasnonce nonce = null;

  public Inspection checkpoint(Checkpoint checkpoint) {
    this.checkpoint = checkpoint;
    return this;
  }

  /**
   * Get checkpoint
   * @return checkpoint
   **/
  @JsonProperty("checkpoint")
  @Schema(required = true, description = "")
  @NotNull
  public Checkpoint getCheckpoint() {
    return checkpoint;
  }

  public void setCheckpoint(Checkpoint checkpoint) {
    this.checkpoint = checkpoint;
  }

  public Inspection inspectionId(ComponentsschemasinspectionId inspectionId) {
    this.inspectionId = inspectionId;
    return this;
  }

  /**
   * Get inspectionId
   * @return inspectionId
   **/
  @JsonProperty("inspectionId")
  @Schema(required = true, description = "")
  @NotNull
  public ComponentsschemasinspectionId getInspectionId() {
    return inspectionId;
  }

  public void setInspectionId(ComponentsschemasinspectionId inspectionId) {
    this.inspectionId = inspectionId;
  }

  public Inspection transportKey(CheckpointInspectorKey transportKey) {
    this.transportKey = transportKey;
    return this;
  }

  /**
   * Get transportKey
   * @return transportKey
   **/
  @JsonProperty("transportKey")
  @Schema(required = true, description = "")
  @NotNull
  public CheckpointInspectorKey getTransportKey() {
    return transportKey;
  }

  public void setTransportKey(CheckpointInspectorKey transportKey) {
    this.transportKey = transportKey;
  }

  public Inspection nonce(Componentsschemasnonce nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * Get nonce
   * @return nonce
   **/
  @JsonProperty("nonce")
  @Schema(required = true, description = "")
  @NotNull
  public Componentsschemasnonce getNonce() {
    return nonce;
  }

  public void setNonce(Componentsschemasnonce nonce) {
    this.nonce = nonce;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Inspection inspection = (Inspection) o;
    return Objects.equals(this.checkpoint, inspection.checkpoint) &&
        Objects.equals(this.inspectionId, inspection.inspectionId) &&
        Objects.equals(this.transportKey, inspection.transportKey) &&
        Objects.equals(this.nonce, inspection.nonce);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkpoint, inspectionId, transportKey, nonce);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Inspection {\n");
    
    sb.append("    checkpoint: ").append(toIndentedString(checkpoint)).append("\n");
    sb.append("    inspectionId: ").append(toIndentedString(inspectionId)).append("\n");
    sb.append("    transportKey: ").append(toIndentedString(transportKey)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
