/*
 * Central Ledger
 * These are the endpoints provided by the Central Ledger server of CAPTOR. These endpoints are used by the Inspect and Transport applications. The Inspect application will use the endpoints with inspection tags and the Transport application will use the endpoints with trip tags
 *
 * OpenAPI spec version: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.model.Coordinates;
import io.swagger.model.FiscalNumber;
import io.swagger.model.Product;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;

/**
 * Object to report a scheduled trip
 */
@Schema(description = "Object to report a scheduled trip")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2019-04-24T14:07:08.201Z[GMT]")public class Trip   {
  @JsonProperty("id")
  private Long id = null;

  @JsonProperty("senderNumber")
  private FiscalNumber senderNumber = null;

  @JsonProperty("receiverNumber")
  private FiscalNumber receiverNumber = null;

  @JsonProperty("loadingCoordinates")
  private Coordinates loadingCoordinates = null;

  @JsonProperty("unloadingCoordinates")
  private Coordinates unloadingCoordinates = null;

  @JsonProperty("freight")
  private List<Product> freight = new ArrayList<Product>();

  @JsonProperty("time")
  private String time = null;

  @JsonProperty("vehicleLicensePlate")
  private String vehicleLicensePlate = null;

  /**
   * Current trip status
   */
  public enum StatusEnum {
    SCHEDULED("scheduled"),
    
    ON_ROUTE("on-route"),
    
    ARRIVED("arrived");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }
  @JsonProperty("status")
  private StatusEnum status = null;

  public Trip id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   **/
  @JsonProperty("id")
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Trip senderNumber(FiscalNumber senderNumber) {
    this.senderNumber = senderNumber;
    return this;
  }

  /**
   * Get senderNumber
   * @return senderNumber
   **/
  @JsonProperty("senderNumber")
  @Schema(required = true, description = "")
  @NotNull
  public FiscalNumber getSenderNumber() {
    return senderNumber;
  }

  public void setSenderNumber(FiscalNumber senderNumber) {
    this.senderNumber = senderNumber;
  }

  public Trip receiverNumber(FiscalNumber receiverNumber) {
    this.receiverNumber = receiverNumber;
    return this;
  }

  /**
   * Get receiverNumber
   * @return receiverNumber
   **/
  @JsonProperty("receiverNumber")
  @Schema(required = true, description = "")
  @NotNull
  public FiscalNumber getReceiverNumber() {
    return receiverNumber;
  }

  public void setReceiverNumber(FiscalNumber receiverNumber) {
    this.receiverNumber = receiverNumber;
  }

  public Trip loadingCoordinates(Coordinates loadingCoordinates) {
    this.loadingCoordinates = loadingCoordinates;
    return this;
  }

  /**
   * Get loadingCoordinates
   * @return loadingCoordinates
   **/
  @JsonProperty("loadingCoordinates")
  @Schema(required = true, description = "")
  @NotNull
  public Coordinates getLoadingCoordinates() {
    return loadingCoordinates;
  }

  public void setLoadingCoordinates(Coordinates loadingCoordinates) {
    this.loadingCoordinates = loadingCoordinates;
  }

  public Trip unloadingCoordinates(Coordinates unloadingCoordinates) {
    this.unloadingCoordinates = unloadingCoordinates;
    return this;
  }

  /**
   * Get unloadingCoordinates
   * @return unloadingCoordinates
   **/
  @JsonProperty("unloadingCoordinates")
  @Schema(required = true, description = "")
  @NotNull
  public Coordinates getUnloadingCoordinates() {
    return unloadingCoordinates;
  }

  public void setUnloadingCoordinates(Coordinates unloadingCoordinates) {
    this.unloadingCoordinates = unloadingCoordinates;
  }

  public Trip freight(List<Product> freight) {
    this.freight = freight;
    return this;
  }

  public Trip addFreightItem(Product freightItem) {
    this.freight.add(freightItem);
    return this;
  }

  /**
   * Get freight
   * @return freight
   **/
  @JsonProperty("freight")
  @Schema(required = true, description = "")
  @NotNull
  public List<Product> getFreight() {
    return freight;
  }

  public void setFreight(List<Product> freight) {
    this.freight = freight;
  }

  public Trip time(String time) {
    this.time = time;
    return this;
  }

  /**
   * Time at which the trip will start
   * @return time
   **/
  @JsonProperty("time")
  @Schema(required = true, description = "Time at which the trip will start")
  @NotNull
  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }

  public Trip vehicleLicensePlate(String vehicleLicensePlate) {
    this.vehicleLicensePlate = vehicleLicensePlate;
    return this;
  }

  /**
   * Get vehicleLicensePlate
   * @return vehicleLicensePlate
   **/
  @JsonProperty("vehicleLicensePlate")
  @Schema(description = "")
  public String getVehicleLicensePlate() {
    return vehicleLicensePlate;
  }

  public void setVehicleLicensePlate(String vehicleLicensePlate) {
    this.vehicleLicensePlate = vehicleLicensePlate;
  }

  public Trip status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Current trip status
   * @return status
   **/
  @JsonProperty("status")
  @Schema(description = "Current trip status")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Trip trip = (Trip) o;
    return Objects.equals(this.id, trip.id) &&
        Objects.equals(this.senderNumber, trip.senderNumber) &&
        Objects.equals(this.receiverNumber, trip.receiverNumber) &&
        Objects.equals(this.loadingCoordinates, trip.loadingCoordinates) &&
        Objects.equals(this.unloadingCoordinates, trip.unloadingCoordinates) &&
        Objects.equals(this.freight, trip.freight) &&
        Objects.equals(this.time, trip.time) &&
        Objects.equals(this.vehicleLicensePlate, trip.vehicleLicensePlate) &&
        Objects.equals(this.status, trip.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, senderNumber, receiverNumber, loadingCoordinates, unloadingCoordinates, freight, time, vehicleLicensePlate, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Trip {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    senderNumber: ").append(toIndentedString(senderNumber)).append("\n");
    sb.append("    receiverNumber: ").append(toIndentedString(receiverNumber)).append("\n");
    sb.append("    loadingCoordinates: ").append(toIndentedString(loadingCoordinates)).append("\n");
    sb.append("    unloadingCoordinates: ").append(toIndentedString(unloadingCoordinates)).append("\n");
    sb.append("    freight: ").append(toIndentedString(freight)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    vehicleLicensePlate: ").append(toIndentedString(vehicleLicensePlate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
